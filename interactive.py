import textwrap  # Pour formater l'affichage du texte de mani√®re lisible
import numpy as np
def interactive_qa_loop(model, embeddings_model, db):
    """
    Boucle interactive de question/r√©ponse utilisant une base de donn√©es vectorielle.
    
    Args:
        model: Mod√®le de similarit√© entra√Æn√©
        embeddings_model: Mod√®le d'embedding
        db: Instance FAISS (doit √™tre l'objet DB directement)
    """
    print("\nüîç Mode interactif (tapez 'quit' pour quitter)")

    while True:
        question = input("\n‚ùì Question: ").strip()

        if question.lower() in ('quit', 'exit', 'q'):
            break
            
        try:
            # V√©rification que db est bien l'objet FAISS
            if not hasattr(db, 'similarity_search'):
                raise AttributeError("L'objet DB ne poss√®de pas la m√©thode similarity_search")
                
            # Recherche des documents similaires
            docs = db.similarity_search(question, k=3)
            
            # Affichage des r√©sultats
            print("\nüìå Meilleure r√©ponse:")
            print(textwrap.fill(docs[0].page_content[:400], width=80))
            
            print("\nüîç Autres r√©sultats:")
            for i, doc in enumerate(docs[1:], 1):
                print(f"\n{i}. {doc.page_content[:200]}...")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur: {str(e)}")
            print("Type de l'objet db:", type(db))
            if isinstance(db, tuple):
                print("db est un tuple. Essayez db[0] pour acc√©der √† l'instance FAISS.")