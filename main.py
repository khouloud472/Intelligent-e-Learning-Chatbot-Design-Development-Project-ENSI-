from data_loading import load_documents, visualize_data
from text_processing import split_texts, visualize_chunks
from embeddings import generate_embeddings, visualize_embeddings, init_embeddings
from faiss_index import init_faiss_index
from evaluation import load_test_data, analyze_test_results, visualize_analysis
from interactive import interactive_qa_loop
from training import train_enhanced_model

import time

def main():
    print("üöÄ D√©marrage du pipeline de traitement...\n")

    try:
        # √âtape 1: Chargement des documents
        print("="*50)
        print("√âTAPE 1: CHARGEMENT DES DOCUMENTS")
        print("="*50)
        start_time = time.time()
        documents = load_documents("pdfs")
        visualize_data(documents)
        print(f"‚è± Temps √©coul√©: {time.time() - start_time:.2f}s")

        # √âtape 2: D√©coupage des textes
        print("\n" + "="*50)
        print("√âTAPE 2: D√âCOUPAGE DES TEXTES")
        print("="*50)
        start_time = time.time()
        chunks = split_texts(documents)
        visualize_chunks(chunks, documents)
        print(f"‚è± Temps √©coul√©: {time.time() - start_time:.2f}s")

        # √âtape 3: Initialisation du mod√®le d'embeddings et g√©n√©ration
        print("\n" + "="*50)
        print("√âTAPE 3: VECTORISATION")
        print("="*50)
        start_time = time.time()
        embeddings_model = init_embeddings()
        embeddings = generate_embeddings(chunks)
        visualize_embeddings(embeddings)
        print(f"‚è± Temps √©coul√©: {time.time() - start_time:.2f}s")

        # √âtape 4: Indexation FAISS
        print("\n" + "="*50)
        print("√âTAPE 4: INDEXATION FAISS")
        print("="*50)
        start_time = time.time()
        db, metrics = init_faiss_index(chunks, embeddings_model)  # D√©ballage correct du tuple

        # R√©cup√©ration d‚Äôinformations sur l‚Äôindex
        index_info = "Non disponible"
        try:
            if hasattr(db, '_index'):
                index_info = str(db._index.ntotal)
            elif hasattr(db, 'index'):
                if callable(db.index):
                    index = db.index()
                    index_info = str(index.ntotal)
                else:
                    index_info = str(db.index.ntotal)
        except Exception as e:
            print(f"‚ö†Ô∏è Impossible de r√©cup√©rer les infos de l'index: {str(e)}")

        # √âtape 5: Entra√Ænement du mod√®le supervis√©
        print("\n" + "="*50)
        print("√âTAPE 5: ENTRA√éNEMENT DU MOD√àLE")
        print("="*50)
        start_time = time.time()
        doc_embeddings = embeddings_model.embed_documents([chunk.page_content for chunk in chunks])
        model = train_enhanced_model(doc_embeddings)
        print(f"‚è± Temps √©coul√©: {time.time() - start_time:.2f}s")

        # √âtape 6: √âvaluation
        print("\n" + "="*50)
        print("√âTAPE 6: √âVALUATION")
        print("="*50)
        try:
            test_data = load_test_data()
            print(f"üìÑ {len(test_data['details'])} questions charg√©es pour l'√©valuation.")
            analysis = analyze_test_results(test_data)
            visualize_analysis(analysis)
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur d'√©valuation: {str(e)}")

        # Statistiques finales
        print("\nüìä Statistiques g√©n√©rales :")
        print(f"- Documents charg√©s : {len(documents)}")
        print(f"- Chunks cr√©√©s      : {len(chunks)}")
        print(f"- Embeddings dim.   : {embeddings.shape[1]}")
        print(f"- Vecteurs index√©s  : {index_info}")
        print(f"‚è± Pipeline total termin√© en {time.time() - start_time:.2f}s")

          # √âtape 7: Boucle interactive utilisateur
        print("\n" + "="*50)
        print("√âTAPE 7: INTERACTION UTILISATEUR")
        print("="*50)
        interactive_qa_loop(model, embeddings_model, db)  # db est maintenant correctement pass√©

        print("\n‚úÖ Pipeline complet ex√©cut√© avec succ√®s !")

    except Exception as e:
        print(f"\n‚ùå Erreur dans le pipeline : {str(e)}")
        raise e

if __name__ == "__main__":
    main()
